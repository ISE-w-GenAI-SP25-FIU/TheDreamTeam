Features:
1. Inclusion of a workouts page that provides a list of workouts based on user searches and workout filters.

Tasks (Ordered by priority):
a) Setup API integration to pull exercises from wger API.
Story Points: 3
Acceptance Criteria:
- API requests successfully retrieve workout data from wger API
- Retrieved data is formatted to be displayed in Streamlit
- Errors are handled with fallback messages

b) Create table in database to store users favorite workouts.
Story Points: 2
Acceptance Criteria:
- A new table is created to store user workout favorites with appropriate schema (userId, workoutId)
- Database queries successfully store and retrieve favorite workouts

c) Add a Workouts page in Streamlit.
Story Points: 1
Acceptance Criteria:
- A new page is accessible from the navbar
- Page layout follows the existing Streamlit UI design

d) Display unfiltered workout list when workouts page is visited.
Story Points: 2
Acceptance Criteria:
- Full list of workouts is displayed upon page load
- No filters or search params are applied initially
- Page loads within 5 seconds

e) Create search bar with text input for users to filter workouts.
Story Points: 3
Acceptance Criteria:
- Users can type workout names or keywords to filter results
- Search results update dynamically based on user input

f) Create "Sort By" dropdown menu for users to filter workout list.
Story Points: 1
Acceptance Criteria:
- Users can sort workouts by categories available in the API
- Newly populated workouts will be filtered successfully

g) Add a favorites tab for users to filter only their favorited workouts.
Story Points: 3
Acceptance Criteria:
- A favorites tab is added to the page with a star icon
- When star icon is clicked, it will change state (look filled in) and favorite workouts will be displayed

2. Addition of leaderboard to the community page that shows the top exercise point earners.

Tasks (Ordered by priority):
a) Alter database schema to calculate users points based on workout statistics.
Story Points: 1
Acceptance Criteria:
- A new column for user points is added to the database based on calculation
- Columns follows calculation of 1 point per cal. burned + 50 points per mile ran
- Schema changes must not break existing database functionality

b) Create new column in Community page to display leaderboard.
Story Points: 1
Acceptance Criteria:
- A leaderboard section is added on the far left of the Community page
- UI layout is aligned with existing design

c) Add frontend implementation of leaderboard with consistent UI and styling.
Story Points: 3
Acceptance Criteria:
- Placeholder content is displayed before backend integration
- Leaderboard UI matches styling of paper prototype

d) Integrate backend database to populate top point earners by day, week, month, and year.
Story Points: 3
Acceptance Criteria:
- Leaderboard dynamically updates top point earners from database queries
- Users can toggle between daily, weekly, monthly, and yearly rankings
- Queries are optimized for performance

3. Addition of user badges based on their workout trends to the bottom of the community page.

Tasks (Ordered by priority):
a) Create front-end section in bottom of Streamlit community page to display badges.
Story Points: 1
Acceptance Criteria:
- A new section is added below the existing content of the Community page
- Section layout does not disrupt other page elements
- Section loads correctly with placeholder content

b) Import badge PNGs and display them on page with proper styling.
Story Points: 1
Acceptance Criteria:
- Badge images are uploaded and load correctly without distortion
- Badge sizes are consistent

c) Apply CSS styling and logic to reduce opacity and add lock icon for badges that haven't been earned.
Story Points: 2
Acceptance Criteria:
- Locked badges appear grayed out with a lock icon overlay
- Unlocked badges appear in full color
- Clicking on badge will display more badge info

d) Use database queries to determine whether user has completed badge and display accordingly.
Story Points: 3
Acceptance Criteria:
- Database is queried to check for each badges progress
- Earned badges update dynamically when requirements are met
- Badge display remains accurate even after page reload

Sprint Planning (tasks ordered by priority):
Alain:
1. Create search bar with text input for users to filter workouts.
Story Points: 3
2. Create "Sort By" dropdown menu for users to filter workout list.
Story Points: 1
3. Add a favorites tab for users to filter only their favorited workouts.
Story Points: 3

Eric:
1. Setup API integration to pull exercises from wger API.
Story Points: 3
2. Create table in database to store users favorite workouts.
Story Points: 2
3. Add a Workouts page in Streamlit.
Story Points: 1
4. Display unfiltered workout list when workouts page is visited.
Story Points: 2

Euikyun:
1. Create front-end section in bottom of Streamlit community page to display badges.
Story Points: 1
2. Import badge PNGs and display them on page with proper styling.
Story Points: 1
3. Apply CSS styling and logic to reduce opacity and add lock icon for badges that haven't been earned.
Story Points: 2
4. Use database queries to determine whether user has completed badge and display accordingly.
Story Points: 3

Jernai:
1. Alter database schema to calculate users points based on workout statistics.
Story Points: 1
2. Add a Workouts page in Streamlit.
Story Points: 1
3. Add frontend implementation of leaderboard with consistent UI and styling.
Story Points: 3
4. Integrate backend database to populate top point earners by day, week, month, and year.
Story Points: 3


